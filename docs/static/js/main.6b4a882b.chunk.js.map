{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAuB5C,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAKEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAxBc,SAACP,GAIvBF,EAAcE,EAAEQ,OAAOF,a,+BCXdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAgBZM,GAhBY,4CAAH,sDCEXO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCJJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAqBtC,OAbAC,qBAAU,WAENxB,EAAQC,GAAUwB,MACd,SAAAC,GACIH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAAEpB,IAEEqB,EDnBuBK,CAAc1B,GAAhCa,EAFyB,EAE9BN,KAAYa,EAFkB,EAElBA,QAGnB,OACI,qCACI,mCAAMpB,KAELoB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEbxBgB,EAAe,WAAM,MAIMzC,mBAAS,CAAC,cAJhB,mBAIvB0C,EAJuB,KAIX3C,EAJW,KAO9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ2C,EAAWnB,KAAI,SAACT,EAAU6B,GAAX,OACX,cAAC,EAAD,CAGI7B,SAAUA,GADLA,Y,MCfjC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6b4a882b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('') //si no tiene nada el valor de inputvalues es undifined\n    \n    const handleInputChange = (e) => {\n         \n        // console.log(e.target.value);\n\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault(); //prevenir el comportaminto del dormulario\n\n\n\n\n        if (inputValue.trim().length>2) {\n            setCategories( cats => [inputValue,...cats] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","    export const getGifs = async (category) => {\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=obyx6QvsErKuCg7QKYgNKA2eBmjt0LG9`;\n\n        const resp = await fetch (url);\n        const {data} = await resp.json();\n\n        const gifs = data.map(img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n\n            }\n        }\n        )\n\n        return gifs; //REGREA UNA PROMESA QUE DEVUELME LAS IAMGENES\n\n    }","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title} />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React  from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'; \nexport const GifGrid = ({ category }) => {\n\n    const {data:images,loading} = useFetchGifs( category);\n\n\n    return (\n        <>\n            <h3> {category}</h3>\n\n            {loading && <p>Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map((img) => (\n                        <GifGridItem\n                            key={img.id} \n                            {...img}\n                        />\n                        ))\n                    }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n\n    useEffect(() => {\n        \n        getGifs(category).then(\n            imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            }\n        )\n\n    }, [ category ]); // se ejecunta dentro de la funcion cuand el compoente es ejecutdo pro priemra ves\n    \n    return state // data: [ ] , loagind: true\n}","import React, { useState}from 'react'\nimport {AddCategory} from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    // const categories = ['one', 'samurau','Goku'];\n\n    const [categories, setCategories] = useState(['One Piece'])\n\n\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <AddCategory setCategories={ setCategories } />\n            <hr /> \n            <ol>\n                {\n                    categories.map((category, i) => (\n                        <GifGrid\n                            \n                            key={category}\n                            category={category} />\n\n                    ))\n                }\n            </ol>\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render( \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}